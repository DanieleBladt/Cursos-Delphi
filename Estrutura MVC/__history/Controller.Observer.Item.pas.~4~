unit Controller.Observer.Item;

interface

uses
  Controller.Observer.Interfaces;

type
  TControllerObserverItem = class(TInterfacedObject, ISubjectItem)
    private
      FList: TList<IObserverItem>;
    public
      constructor Create;
      destructor Destroy; override;
      class function New:ISubjectItem;

      function Add(Value: IObserverItem): ISubjectItem;
      function Notify(Value: TRecordItem): ISubjectItem;
  end;

implementation

{ TControllerObserverItem }

function TControllerObserverItem.Add(Value: IObserverItem): ISubjectItem;
begin

end;

constructor TControllerObserverItem.Create;
begin

end;

destructor TControllerObserverItem.Destroy;
begin

  inherited;
end;

class function TControllerObserverItem.New: ISubjectItem;
begin

end;

function TControllerObserverItem.Notify(Value: TRecordItem): ISubjectItem;
begin

end;

end.
