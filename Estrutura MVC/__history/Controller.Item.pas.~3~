unit Controller.Item;

interface

uses
  Controller.Interfaces;

type
  TControllerItem = class(TInterfacedObject, IControllerItem)
    private
      [weak]
      FParent: IControllerVenda;
      FCodigo: Integer;
    public
      constructor Create(Parent: IControllerVenda);
      destructor Destroy; override;
      class function New(Parent: IControllerVenda): IControllerItem;

      function Codigo(Value: Integer): IControllerItem;
      function Vender: IControllerItem;
      function &End: IControllerVenda;
  end;

implementation

{ TControllerItem }

function TControllerItem.Codigo(Value: Integer): IControllerItem;
begin
  Result := Self;
  FCodigo := Value;
end;

function TControllerItem.&End: IControllerVenda;
begin
  Result := FParent;
end;

constructor TControllerItem.Create(Parent: IControllerVenda);
begin
  FParent := Parent;
end;

destructor TControllerItem.Destroy;
begin

  inherited;
end;

class function TControllerItem.New(Parent: IControllerVenda): IControllerItem;
begin
  Result := Self.Create(Parent);
end;

function TControllerItem.Vender: IControllerItem;
begin
  Result := Self;
  FParent.Model
end;

end.
